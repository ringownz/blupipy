[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.103.0"
uvicorn = "0.23.2"
pydantic = "^2.0.0"
requests = "^2.22.0"
loguru = "^0.7.0"
joblib = "^1.2.0"
scikit-learn = "^1.2.0"
{%- if cookiecutter.ruff == "true" -%}
ruff = "^0.3.4"
{% endif %}

[tool.poetry.group.dev.dependencies]
pytest = "^7.2"
{%- if cookiecutter.black == "true" -%}
black = {version = "^19.10b0", allow-prereleases = true}
{% endif %}
autopep8 = "^2.0.0"
ipdb = "^0.13.0"
pylint = "^3.0.0"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

{%- if cookiecutter.black == "true" -%}

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
  \.toml
  |\.sh
  |\.git
  |\.ini
  |Dockerfile
  |Jenkinfile
)/
'''
{% endif %}
{%- if cookiecutter.ruff == "true" -%}


[tool.ruff]
# Set the maximum line length to 79.
line-length = 79

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
extend-select = ["E501"]
{% endif %}


